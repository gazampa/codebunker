import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.w3c.dom.Document;
import org.w3c.dom.DOMException;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.JSplitPane;
import javax.swing.JEditorPane;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowAdapter;
import javax.swing.border.EmptyBorder;
import javax.swing.border.BevelBorder;
import javax.swing.border.CompoundBorder;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.TreePath;

@SuppressWarnings("serial")
public class Echo extends JPanel{
	static Document document;
	boolean compress = false;
	static final int windowHeight = 460;
	static final int leftWidth = 300;
	static final int rightWidth = 340;
    static final int windowWidth = leftWidth + rightWidth;

	public Echo(){
		EmptyBorder eb = new EmptyBorder(5,5,5,5);
		BevelBorder bb = new BevelBorder(BevelBorder.LOWERED);
		CompoundBorder cb = new CompoundBorder(eb,bb);
		this.setBorder(new CompoundBorder(cb,eb));

		JTree tree = new JTree(new DomToTreeModelAdapter());

		JScrollPane treeView = new JScrollPane(tree);
			treeView.setPreferredSize( new Dimension( leftWidth, windowHeight ) );

		JEditorPane htmlPane = new JEditorPane("text/html","");
			htmlPane.setEditable(false);
		JScrollPane htmlView = new JScrollPane(htmlPane);
			htmlView.setPreferredSize( new Dimension( rightWidth, windowHeight ) );

		JSplitPane splitPane = new JSplitPane( JSplitPane.HORIZONTAL_SPLIT, treeView, htmlView );
			splitPane.setContinuousLayout( true );
			splitPane.setDividerLocation( leftWidth );
			splitPane.setPreferredSize( new Dimension( windowWidth + 10, windowHeight+10 ) );

		this.setLayout(new BorderLayout());
		this.add("Center", splitPane );

	}

	public static void main(String args[]){

		if(args.length!=1){
			//System.err.println("Usage: java Echo filename");
			//System.exit(1);
			buildDom();
			makeFrame();
			return;
		}

		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		try{
			DocumentBuilder builder = factory.newDocumentBuilder();
			document = builder.parse( new File(args[0]) );
			//makeFrame();
			makeConsoleOutput(document);
		}catch (SAXException sxe){
			Exception x = sxe;
			if ( sxe.getException()!=null )
				x = sxe.getException();
			x.printStackTrace();
		}catch(ParserConfigurationException pce){
			pce.printStackTrace();
		}catch(IOException ioe){
			ioe.printStackTrace();
		}

	}

	public static void makeFrame()
	{
		JFrame frame = new JFrame("DOM Echo");
		frame.addWindowListener(new WindowAdapter() {
		  public void windowClosing(WindowEvent e) {System.exit(0);}
		});

		final Echo echoPanel = new Echo();
		frame.getContentPane().add("Center", echoPanel );
		frame.pack();
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		int w = windowWidth + 10;
		int h = windowHeight + 10;
		frame.setLocation(screenSize.width/3 - w/2, screenSize.height/2 - h/2);
		frame.setSize(w, h);
		frame.setVisible(true);
	}

	static final String[] typeName = {
		"none",
		"Element",
		"Attr",
		"Text",
		"CDATA",
		"EntityRef",
		"Entity",
		"ProcInstr",
		"Comment",
		"Document",
		"DocType",
		"DocFragment",
		"Notation",
	};
	final int ELEMENT_TYPE = 1;
	static String[] treeElementNames = {
//		"slideshow",
//		"slide",
//		"title",
//		"slide-title",
//		"item",


	};
	boolean treeElement(String elementName){
		for(int i=0;i<treeElementNames.length;i++){
			if( elementName.equals(treeElementNames[i]) )
				return true;
			}
		return false;
	}

    public class AdapterNode
    {
      org.w3c.dom.Node domNode;

      // Construct an Adapter node from a DOM node
      public AdapterNode(org.w3c.dom.Node node) {
        domNode = node;
      }

      // Return a string that identifies this node in the tree
      // *** Refer to table at top of org.w3c.dom.Node ***
      public String toString() {
        String s = typeName[domNode.getNodeType()];
        String nodeName = domNode.getNodeName();
        if (! nodeName.startsWith("#")) {
           s += ": " + nodeName;
        }
        if (domNode.getNodeValue() != null) {
           if (s.startsWith("ProcInstr"))
              s += ", ";
           else
              s += ": ";
           // Trim the value to get rid of NL's at the front
           String t = domNode.getNodeValue().trim();
           int x = t.indexOf("\n");
           if (x >= 0) t = t.substring(0, x);
           s += t;
        }
        return s;
      }

      public int index(AdapterNode child){
		  int count = childCount();
		  for(int i=0;i<count;i++){
			  AdapterNode n = this.child(i);
			  if(child==n)
			  	return i;
		  }
		  return -1;
	  }

	  public AdapterNode child(int searchIndex){
		  org.w3c.dom.Node node = domNode.getChildNodes().item(searchIndex);

		  if(compress){
			  int elementNodeIndex = 0;
			  for(int i=0;i<domNode.getChildNodes().getLength();i++){
				  node = domNode.getChildNodes().item(i);
				  if (node.getNodeType() == ELEMENT_TYPE && treeElement( node.getNodeName() )&& elementNodeIndex++==searchIndex){
				  	break;
				  }
			  }
		  }


		  return new AdapterNode(node);
	  }

	  public int childCount(){
		  if(!compress)
		  	return domNode.getChildNodes().getLength();

		  int count = 0;
		  for( int i=0; i<domNode.getChildNodes().getLength();i++){
			  org.w3c.dom.Node node = domNode.getChildNodes().item(i);
			  if( node.getNodeType() == ELEMENT_TYPE && treeElement(node.getNodeName()) )
			  	count++;
		  }
	  	return count;
	  }
    }

    public class DomToTreeModelAdapter implements javax.swing.tree.TreeModel{
		public Object getRoot(){
			return new AdapterNode(document);
		}

		public boolean isLeaf(Object aNode){
			AdapterNode node = (AdapterNode) aNode;
			if (node.childCount()>0)
				return false;
			return true;
		}

		public int getChildCount(Object parent){
			AdapterNode node = (AdapterNode) parent;
			return node.childCount();
		}

		public Object getChild(Object parent, int index){
			AdapterNode node = (AdapterNode) parent;
			return node.child(index);
		}

		public int getIndexOfChild(Object parent, Object child){
			AdapterNode node = (AdapterNode) parent;
			return node.index((AdapterNode)child);
		}

		public void valueForPathChanged(TreePath path, Object newValue){
		}

		private List<TreeModelListener> listenerList = new LinkedList<TreeModelListener>();
		public void addTreeModelListener( TreeModelListener listener ){
			if( listener!=null && ! listenerList.contains(listener) ) {
				listenerList.add( listener );
			}
		}
		public void removeTreeModelListener( TreeModelListener listener ){
			if ( listener != null ){
				listenerList.remove( listener );
			}
		}
	}
	@SuppressWarnings("cast")
	public static void buildDom(){
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		try{

			DocumentBuilder builder = factory.newDocumentBuilder();
			document = builder.newDocument();

			Element root = (Element) document.createElement("checkBalanceRequest");
			document.appendChild(root);
			Element sessionId = document.createElement("sessionId");
			Element clientName = document.createElement("clientName");
			Element hqAccNum = document.createElement("hqacNbr");

			root.appendChild( sessionId );
			sessionId.appendChild( document.createTextNode("SESSION ID") );
			root.appendChild( clientName );
			clientName.appendChild( document.createTextNode("CLIENT NAME") );
			root.appendChild( hqAccNum );
			hqAccNum.appendChild( document.createTextNode("HQ ACCOUNT NUMBER") );

			document.getDocumentElement().normalize();

		}catch( ParserConfigurationException pce ){
			pce.printStackTrace();
		}
	}
	private static void makeConsoleOutput(Document document){
            NodeList nodeList = document.getElementsByTagName("checkBalanceResponse");//[checkBalanceResponse]
            Node responseRoot = nodeList.item(0);

            NodeList level1 = responseRoot.getChildNodes();//[dealer,programs+]
			NodeList level2=null;
			NodeList level3=null;
			NodeList level4=null;

			for( int i=0;i<level1.getLength();i++ )
			{
				Node node = level1.item(i);
				//System.out.println(i + " " + node.getNodeName());
				if ( node!=null ){
					if ( node.getNodeName().equals("dealer") )
					{
						System.out.println(node.getNodeName());

						level2 = node.getChildNodes();
						for ( int j=0;j<level2.getLength();j++ )
						{
							node = level2.item(j);
							if ( node!=null ){
								if ( node.getNodeName().equals("sessionId") ){
									System.out.println("level 2 dealer : "+node.getNodeName() + " value : "+node.getFirstChild().getNodeValue().trim());}
								if ( node.getNodeName().equals("dealerName") ){
									System.out.println("level 2 dealer : "+node.getNodeName() + " value : "+node.getFirstChild().getNodeValue().trim());}
								if ( node.getNodeName().equals("user") ){
									System.out.println("level 2 dealer : "+node.getNodeName());
									level3 = node.getChildNodes();
									for(int k=0;k<level3.getLength();k++)
									{
										node = level3.item(k);
										if ( node!=null )
										{
											if ( node.getNodeName().equals("name") ){
												System.out.println("level 3 user : "+node.getNodeName());}
											if ( node.getNodeName().equals("address") ){
												level4 = node.getChildNodes();
												for( int m=0;m<level4.getLength();m++)
												{
													node=level4.item(m);
													if ( node != null )
													{
														if( node.getNodeName().equals("addr1") ){
															System.out.println("level 4 user address : "+ node.getNodeName());}
														if( node.getNodeName().equals("addr2") ){
															System.out.println("level 4 user address : "+ node.getNodeName());}
														if( node.getNodeName().equals("city") ){
															System.out.println("level 4 user address : "+ node.getNodeName());}
														if( node.getNodeName().equals("zip") ){
															System.out.println("level 4 user address : "+ node.getNodeName());}
														if( node.getNodeName().equals("state") ){
															System.out.println("level 4 user address : "+ node.getNodeName());}
														if( node.getNodeName().equals("country") ){
															System.out.println("level 4 user address : "+ node.getNodeName());}
													}
												}
											}
											if ( node.getNodeName().equals("phone") ){
												System.out.println("level 3 user : "+node.getNodeName());}
											if ( node.getNodeName().equals("email") ){
												System.out.println("level 3 user : "+node.getNodeName());}
										}
									}
								}

								if ( node.getNodeName().equals("manager") ){
									System.out.println("level 2 dealer : "+node.getNodeName());
									level3 = node.getChildNodes();
									for(int k=0;k<level3.getLength();k++)
									{
										node = level3.item(k);
										if ( node!=null )
										{
											if ( node.getNodeName().equals("name") ){
												System.out.println("level 3 manager : "+node.getNodeName());}
											if ( node.getNodeName().equals("address") ){
												level4 = node.getChildNodes();
												for( int m=0;m<level4.getLength();m++)
												{
													node=level4.item(m);
													if ( node != null )
													{
														if( node.getNodeName().equals("addr1") ){
															System.out.println("level 4 manager address : "+ node.getNodeName());}
														if( node.getNodeName().equals("addr2") ){
															System.out.println("level 4 manager address : "+ node.getNodeName());}
														if( node.getNodeName().equals("city") ){
															System.out.println("level 4 manager address : "+ node.getNodeName());}
														if( node.getNodeName().equals("zip") ){
															System.out.println("level 4 manager address : "+ node.getNodeName());}
														if( node.getNodeName().equals("state") ){
															System.out.println("level 4 manager address : "+ node.getNodeName());}
														if( node.getNodeName().equals("country") ){
															System.out.println("level 4 manager address : "+ node.getNodeName());}
													}
												}
											}
											if ( node.getNodeName().equals("phone") ){
												System.out.println("level 3 manager : "+node.getNodeName());}
											if ( node.getNodeName().equals("email") ){
												System.out.println("level 3 manager : "+node.getNodeName());}
										}
									}

								}
							}

						}
					}
					if ( node.getNodeName().equals("programs") )
					{
						System.out.println(node.getNodeName());

						level2 = node.getChildNodes();
						for ( int j=0;j<level2.getLength();j++ )
						{
							node = level2.item(j);
							if ( node!=null )
							{
								if ( node.getNodeName().equals("program") )
								{
									System.out.println("level 2 programs : "+node.getNodeName());
									level3=node.getChildNodes();
									for (int k = 0;k<level3.getLength();k++)
									{
										node = level3.item(k);
										if ( node!=null )
										{
											if( node.getNodeName().equals("name") ){
												System.out.println("level 3 program name : "+ node.getNodeName());}
											if( node.getNodeName().equals("year") ){
												System.out.println("level 3 program year : "+ node.getNodeName());}
											if( node.getNodeName().equals("currency") ){
												System.out.println("level 3 program address : "+ node.getNodeName());}
											if( node.getNodeName().equals("initialBalance") ){
												System.out.println("level 3 program address : "+ node.getNodeName());}
											if( node.getNodeName().equals("availableBalance") ){
												System.out.println("level 3 program address : "+ node.getNodeName());}
											if( node.getNodeName().equals("fundsUsed") ){
												System.out.println("level 3 program address : "+ node.getNodeName());}
										}
									}
								}
							}

						}
					}

				}
			}

	}
}
/*			builder.setErrorHandler(
			  new org.xml.sax.ErrorHandler() {
			      public void fatalError(SAXParseException exception)
			      throws SAXException {
			      }

			      public void error(SAXParseException e)
			      throws SAXParseException
			      {
			        throw e;
			      }

			      public void warning(SAXParseException err)
			      throws SAXParseException
			      {
			        System.out.println("** Warning"
			           + ", line " + err.getLineNumber()
			           + ", uri " + err.getSystemId());
			        System.out.println("   " + err.getMessage());
			      }
			  }
			);
*/